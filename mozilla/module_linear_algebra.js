function matCreate() {
  return  [[1, 0, 0, 0],
           [0, 1, 0, 0],
           [0, 0, 1, 0],
           [0, 0, 0, 1]]
}

function matDeterminant(m) {
  return ((((m[0][0]*(((m[1][1]*((m[2][2]*m[3][3])-(m[2][3]*m[3][2])))-(m[1][2]*((m[2][1]*m[3][3])-(m[2][3]*m[3][1]))))+(m[1][3]*((m[2][1]*m[3][2])-(m[2][2]*m[3][1])))))-(m[0][1]*(((m[1][0]*((m[2][2]*m[3][3])-(m[2][3]*m[3][2])))-(m[1][2]*((m[2][0]*m[3][3])-(m[2][3]*m[3][0]))))+(m[1][3]*((m[2][0]*m[3][2])-(m[2][2]*m[3][0]))))))+(m[0][2]*(((m[1][0]*((m[2][1]*m[3][3])-(m[2][3]*m[3][1])))-(m[1][1]*((m[2][0]*m[3][3])-(m[2][3]*m[3][0]))))+(m[1][3]*((m[2][0]*m[3][1])-(m[2][1]*m[3][0]))))))-(m[0][3]*(((m[1][0]*((m[2][1]*m[3][2])-(m[2][2]*m[3][1])))-(m[1][1]*((m[2][0]*m[3][2])-(m[2][2]*m[3][0]))))+(m[1][2]*((m[2][0]*m[3][1])-(m[2][1]*m[3][0]))))));
}

function matFlatten(m) {
  f = new Float32Array(16);
  for (let i = 0; i < 4; ++i) {
    for (let j = 0; j < 4; ++j) {
      f[i * 4 + j] = m[i][j];
    }
  }
  return f;
}

function matInvert(m) {
  d = matDeterminant(m);
  r = matCreate();
  r[0][0] = (((m[1][1]*((m[2][2]*m[3][3])-(m[2][3]*m[3][2])))-(m[1][2]*((m[2][1]*m[3][3])-(m[2][3]*m[3][1]))))+(m[1][3]*((m[2][1]*m[3][2])-(m[2][2]*m[3][1])))) / d;
  r[0][1] = (-(((m[0][1]*((m[2][2]*m[3][3])-(m[2][3]*m[3][2])))-(m[0][2]*((m[2][1]*m[3][3])-(m[2][3]*m[3][1]))))+(m[0][3]*((m[2][1]*m[3][2])-(m[2][2]*m[3][1]))))) / d;
  r[0][2] = (((m[0][1]*((m[1][2]*m[3][3])-(m[1][3]*m[3][2])))-(m[0][2]*((m[1][1]*m[3][3])-(m[1][3]*m[3][1]))))+(m[0][3]*((m[1][1]*m[3][2])-(m[1][2]*m[3][1])))) / d;
  r[0][3] = (-(((m[0][1]*((m[1][2]*m[2][3])-(m[1][3]*m[2][2])))-(m[0][2]*((m[1][1]*m[2][3])-(m[1][3]*m[2][1]))))+(m[0][3]*((m[1][1]*m[2][2])-(m[1][2]*m[2][1]))))) / d;
  r[1][0] = (-(((m[1][0]*((m[2][2]*m[3][3])-(m[2][3]*m[3][2])))-(m[1][2]*((m[2][0]*m[3][3])-(m[2][3]*m[3][0]))))+(m[1][3]*((m[2][0]*m[3][2])-(m[2][2]*m[3][0]))))) / d;
  r[1][1] = (((m[0][0]*((m[2][2]*m[3][3])-(m[2][3]*m[3][2])))-(m[0][2]*((m[2][0]*m[3][3])-(m[2][3]*m[3][0]))))+(m[0][3]*((m[2][0]*m[3][2])-(m[2][2]*m[3][0])))) / d;
  r[1][2] = (-(((m[0][0]*((m[1][2]*m[3][3])-(m[1][3]*m[3][2])))-(m[0][2]*((m[1][0]*m[3][3])-(m[1][3]*m[3][0]))))+(m[0][3]*((m[1][0]*m[3][2])-(m[1][2]*m[3][0]))))) / d;
  r[1][3] = (((m[0][0]*((m[1][2]*m[2][3])-(m[1][3]*m[2][2])))-(m[0][2]*((m[1][0]*m[2][3])-(m[1][3]*m[2][0]))))+(m[0][3]*((m[1][0]*m[2][2])-(m[1][2]*m[2][0])))) / d;
  r[2][0] = (((m[1][0]*((m[2][1]*m[3][3])-(m[2][3]*m[3][1])))-(m[1][1]*((m[2][0]*m[3][3])-(m[2][3]*m[3][0]))))+(m[1][3]*((m[2][0]*m[3][1])-(m[2][1]*m[3][0])))) / d;
  r[2][1] = (-(((m[0][0]*((m[2][1]*m[3][3])-(m[2][3]*m[3][1])))-(m[0][1]*((m[2][0]*m[3][3])-(m[2][3]*m[3][0]))))+(m[0][3]*((m[2][0]*m[3][1])-(m[2][1]*m[3][0]))))) / d;
  r[2][2] = (((m[0][0]*((m[1][1]*m[3][3])-(m[1][3]*m[3][1])))-(m[0][1]*((m[1][0]*m[3][3])-(m[1][3]*m[3][0]))))+(m[0][3]*((m[1][0]*m[3][1])-(m[1][1]*m[3][0])))) / d;
  r[2][3] = (-(((m[0][0]*((m[1][1]*m[2][3])-(m[1][3]*m[2][1])))-(m[0][1]*((m[1][0]*m[2][3])-(m[1][3]*m[2][0]))))+(m[0][3]*((m[1][0]*m[2][1])-(m[1][1]*m[2][0]))))) / d;
  r[3][0] = (-(((m[1][0]*((m[2][1]*m[3][2])-(m[2][2]*m[3][1])))-(m[1][1]*((m[2][0]*m[3][2])-(m[2][2]*m[3][0]))))+(m[1][2]*((m[2][0]*m[3][1])-(m[2][1]*m[3][0]))))) / d;
  r[3][1] = (((m[0][0]*((m[2][1]*m[3][2])-(m[2][2]*m[3][1])))-(m[0][1]*((m[2][0]*m[3][2])-(m[2][2]*m[3][0]))))+(m[0][2]*((m[2][0]*m[3][1])-(m[2][1]*m[3][0])))) / d;
  r[3][2] = (-(((m[0][0]*((m[1][1]*m[3][2])-(m[1][2]*m[3][1])))-(m[0][1]*((m[1][0]*m[3][2])-(m[1][2]*m[3][0]))))+(m[0][2]*((m[1][0]*m[3][1])-(m[1][1]*m[3][0]))))) / d;
  r[3][3] = (((m[0][0]*((m[1][1]*m[2][2])-(m[1][2]*m[2][1])))-(m[0][1]*((m[1][0]*m[2][2])-(m[1][2]*m[2][0]))))+(m[0][2]*((m[1][0]*m[2][1])-(m[1][1]*m[2][0])))) / d;
  return r;
}

function matLookAt(eye, center, up) {
  z = vector3Sub(center, eye);
  z = vector3Normalize(z);
  y = vector3Normalize(up);
  x = vector3Cross(z, y);
  y = vector3Cross(vector3Normalize(x), z);
  ex = -vector3Dot(x, eye);
  ey = -vector3Dot(y, eye);
  ez = vector3Dot(z, eye);
  return[
    [x[0],  x[1], x[2],  0],
    [y[0],  y[1], y[2],  0],
    [-z[0], -z[1],-z[2], 0],
    [ex,    ey,   ez,     1]];
}

function matMultiply(m, n) {
  r = matCreate();
  r[0][0] = ((((m[0][0]*n[0][0])+(m[0][1]*n[1][0]))+(m[0][2]*n[2][0]))+(m[0][3]*n[3][0]))
  r[0][1] = ((((m[0][0]*n[0][1])+(m[0][1]*n[1][1]))+(m[0][2]*n[2][1]))+(m[0][3]*n[3][1]))
  r[0][2] = ((((m[0][0]*n[0][2])+(m[0][1]*n[1][2]))+(m[0][2]*n[2][2]))+(m[0][3]*n[3][2]))
  r[0][3] = ((((m[0][0]*n[0][3])+(m[0][1]*n[1][3]))+(m[0][2]*n[2][3]))+(m[0][3]*n[3][3]))
  r[1][0] = ((((m[1][0]*n[0][0])+(m[1][1]*n[1][0]))+(m[1][2]*n[2][0]))+(m[1][3]*n[3][0]))
  r[1][1] = ((((m[1][0]*n[0][1])+(m[1][1]*n[1][1]))+(m[1][2]*n[2][1]))+(m[1][3]*n[3][1]))
  r[1][2] = ((((m[1][0]*n[0][2])+(m[1][1]*n[1][2]))+(m[1][2]*n[2][2]))+(m[1][3]*n[3][2]))
  r[1][3] = ((((m[1][0]*n[0][3])+(m[1][1]*n[1][3]))+(m[1][2]*n[2][3]))+(m[1][3]*n[3][3]))
  r[2][0] = ((((m[2][0]*n[0][0])+(m[2][1]*n[1][0]))+(m[2][2]*n[2][0]))+(m[2][3]*n[3][0]))
  r[2][1] = ((((m[2][0]*n[0][1])+(m[2][1]*n[1][1]))+(m[2][2]*n[2][1]))+(m[2][3]*n[3][1]))
  r[2][2] = ((((m[2][0]*n[0][2])+(m[2][1]*n[1][2]))+(m[2][2]*n[2][2]))+(m[2][3]*n[3][2]))
  r[2][3] = ((((m[2][0]*n[0][3])+(m[2][1]*n[1][3]))+(m[2][2]*n[2][3]))+(m[2][3]*n[3][3]))
  r[3][0] = ((((m[3][0]*n[0][0])+(m[3][1]*n[1][0]))+(m[3][2]*n[2][0]))+(m[3][3]*n[3][0]))
  r[3][1] = ((((m[3][0]*n[0][1])+(m[3][1]*n[1][1]))+(m[3][2]*n[2][1]))+(m[3][3]*n[3][1]))
  r[3][2] = ((((m[3][0]*n[0][2])+(m[3][1]*n[1][2]))+(m[3][2]*n[2][2]))+(m[3][3]*n[3][2]))
  r[3][3] = ((((m[3][0]*n[0][3])+(m[3][1]*n[1][3]))+(m[3][2]*n[2][3]))+(m[3][3]*n[3][3]))
  return r;
}

function matProjection(fov, near, far) {
  scale = 1 / (Math.tan((fov / 2) * (Math.PI / 180)));
  m = matCreate();
  m[0][0] = scale;
  m[1][1] = scale;
  m[2][2] = (far + near) / (near - far);
  m[3][2] = (2 * far * near) / (near - far);
  m[2][3] = -1;
  m[3][3] = 0;
  return m;
}

function matProjection2(fov, near, far) {
  scale = 1 / (Math.tan((fov / 2) * (Math.PI / 180)));
  m = matCreate();
  m[0][0] = scale;
  m[1][1] = scale;
  m[2][2] = -far / (far - near);
  m[3][2] = -far * near / (far - near);
  m[2][3] = -1;
  m[3][3] = 0;
  return m;
}

function matRotateY(angle) {
  var c = Math.cos(angle);
  var s = Math.sin(angle);
  return [
    [c,0,s,0],
    [0,1,0,0],
    [s,0,c,0],
    [0,0,0,1]]
}

function matScale(x, y, z) {
  m = matCreate()
  m[0][0] = x;
  m[1][1] = y;
  m[2][2] = z;
  return m;
}

function matTranslate(x, y, z) {
  m = matCreate()
  m[3][0] = x;
  m[3][1] = y;
  m[3][2] = z;
  return m;
}

function matTranspose(m) {
  r = matCreate();
  for (var i = 0; i < 4; ++i) {
    for (var j = 0; j < 4; ++j) {
      r[j][i] = m[i][j];
    }
  }
  return r;
}

function vector3String(v) {
  return "[" + v[0].toFixed(2) + ", " + v[1].toFixed(2) + ", " + v[2].toFixed(2) + "]";
}

function vector3Add(a, b) {
  return [a[0] + b[0],
          a[1] + b[1],
          a[2] + b[2]];
}

function vector3Cross(a, b) {
  return [a[1] * b[2] - a[2] * b[1],
          a[2] * b[0] - a[0] * b[2],
          a[0] * b[1] - a[1] * b[0]];
}

function vector3Dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

function vector3Mul(a, s) {
  return [a[0] * s,
          a[1] * s,
          a[2] * s];
}

function vector3Negate(a) {
  return [-a[0], -a[1], -a[2]];
}

function vector3Normalize(a) {
  const inv_mag = 1.0 / Math.sqrt(vector3Dot(a, a));
  return vector3Mul(a, inv_mag);
}

function vector3Sub(a, b) {
  return [a[0] - b[0],
          a[1] - b[1],
          a[2] - b[2]];
}